\documentclass{article}
\usepackage{amsmath}
\usepackage{geometry}
\geometry{a4paper, margin=1in}
\usepackage{fancyhdr}
\pagestyle{fancy}
\fancyhf{}
\fancyhead[L]{\leftmark}
\fancyfoot[C]{\thepage}

\title{System Analysis and Design}
\author{}
\date{}

\begin{document}

\maketitle
\tableofcontents
\newpage

\section{What is a System?}
A system is an organized set of components working together in order to achieve a specific goal or perform a particular function. Systems can be biological, mechanical, social, or information systems. For example, a computer is a system made up of hardware (like the processor, memory, and storage) and software (like the operating system and applications). Each part of the system contributes to the overall function, such as running programs or storing data. Similarly, in an organization, a system could be the combination of people, processes, and technology that work together to manage operations like sales, customer service, or logistics.

Thus, we can say, a system is a collection of interrelated components or elements that work together to achieve a common goal.

\section{What is a Subsystem?}
A well-designed system comprises multiple subsystems to effectively distribute the workflow. Each subsystem is tailored to achieve specific sub-goals that ultimately contribute to the attainment of the common goal. For example:
\begin{itemize}
    \item \textbf{Central Processing Unit (CPU) Subsystem:} Acts as the brain of the system, executing instructions and processing data. Its efficiency directly impacts the overall performance of the system.
    \item \textbf{Memory Subsystem:} Provides temporary storage for data and instructions that are actively being used. Efficient memory management helps in quick data retrieval and smooth operation of applications.
    \item \textbf{Storage Subsystem:} Ensures long-term data retention. Choosing between HDDs and SSDs depends on the need for speed versus storage capacity and cost.
    \item \textbf{Input/Output (I/O) Subsystem:} Facilitates communication between the computer and external devices. A well-designed I/O subsystem improves user interaction and data transfer rates.
    \item \textbf{Power Supply Subsystem:} Delivers the necessary electrical power to all components. Reliable power supply is crucial for maintaining system stability and preventing hardware failures.
\end{itemize}

Each subsystem operates independently but must work in harmony with the others to achieve optimal performance and reliability of the entire system.

\section{What is a Bad System?}
A bad system can be identified by several issues that undermine its effectiveness, reliability, or user experience. Here are some common traits of a bad system:
\begin{itemize}
    \item \textbf{Poor Performance:} The system is slow, unresponsive, or struggles to handle tasks efficiently.
    \item \textbf{Unreliable:} The system frequently crashes, encounters errors, or has unstable performance.
    \item \textbf{Complex or Confusing:} The system is difficult to use, with a confusing interface or complicated processes.
    \item \textbf{Inadequate Security:} The system lacks proper security measures, making it vulnerable to attacks, data breaches, or unauthorized access.
    \item \textbf{Poor Scalability:} The system cannot handle increased loads or scale effectively as demands grow.
    \item \textbf{High Maintenance Costs:} The system requires frequent repairs, updates, or manual interventions.
    \item \textbf{Incompatibility:} The system has trouble integrating with other systems or technologies.
    \item \textbf{Lack of Documentation:} The system is poorly documented, making it difficult for users or administrators to understand or troubleshoot issues.
    \item \textbf{Inefficient Resource Use:} The system consumes excessive resources (such as memory, CPU, or storage) without providing corresponding benefits, leading to wasted resources and increased operational costs.
\end{itemize}

In summary, a bad system fails to meet its intended goals effectively, and if any of the subsystems fail or operate poorly, the entire system becomes inefficient or bad.
\newpage
\section{What is the Difference Between a Computer-Based Information System and a Manual System?}
\begin{itemize}
    \item \textbf{Computer-Based Information System (CBIS):} A system that uses computers to collect, process, store, and manage information.
    \item \textbf{Manual System:} A system that relies on human effort and paper-based methods for handling information.
\end{itemize}

\subsection{Differences}
\begin{itemize}
    \item \textbf{Processing Speed:}
    \begin{itemize}
        \item \textbf{CBIS:} Fast processing due to automation and high-speed computing.
        \item \textbf{Manual System:} Slow processing, relying on human effort and manual tasks.
    \end{itemize}
    \item \textbf{Accuracy:}
    \begin{itemize}
        \item \textbf{CBIS:} Generally more accurate as it reduces human error through automated calculations and data entry.
        \item \textbf{Manual System:} Prone to errors and inaccuracies due to manual data entry and calculations.
    \end{itemize}
    \item \textbf{Storage and Retrieval:}
    \begin{itemize}
        \item \textbf{CBIS:} Offers efficient storage and retrieval of large volumes of data with quick access through databases and digital records.
        \item \textbf{Manual System:} Data storage and retrieval are less efficient, often requiring physical storage and manual searching.
    \end{itemize}
    \item \textbf{Scalability:}
    \begin{itemize}
        \item \textbf{CBIS:} Easily scalable to handle increased data volume and user demands with additional hardware and software resources.
        \item \textbf{Manual System:} Scaling up involves more manual labor and physical resources, which can be cumbersome and less flexible.
    \end{itemize}
    \item \textbf{Cost:}
    \begin{itemize}
        \item \textbf{CBIS:} Involves initial setup and maintenance costs for hardware, software, and training but can reduce long-term operational costs through efficiency.
        \item \textbf{Manual System:} Lower initial costs but can incur higher long-term costs due to labor, errors, and inefficiencies.
    \end{itemize}
\end{itemize}
\newpage
\section{Briefly Describe the Following Information Systems:}

\subsection{a. Transaction Processing Systems (TPS)}
Transaction Processing Systems handle day-to-day business transactions, such as sales, purchases, and inventory updates. They process and record transactions quickly and accurately to keep business operations running smoothly.

\textbf{Example:} A retail point-of-sale (POS) system that processes sales transactions, updates inventory levels, and generates receipts.

\subsection{b. Management Information Systems (MIS)}
Management Information Systems provide regular reports and summaries to help managers make informed decisions. They gather data from various sources, process it, and present it in a way that supports planning and control.

\textbf{Example:} A monthly sales report that shows total sales, revenue trends, and performance metrics for different departments.

\subsection{c. Decision Support Systems (DSS)}
Decision Support Systems help with complex decision-making by analyzing large amounts of data and presenting useful insights. They support decision-makers by providing interactive tools for evaluating different scenarios and outcomes.

\textbf{Example:} A financial planning tool that allows managers to model different investment scenarios and evaluate potential returns.

\subsection{d. Expert Systems and Artificial Intelligence (ES \& AI)}
Expert Systems and Artificial Intelligence use computer programs to mimic human expertise and decision-making. Expert Systems provide solutions based on a set of rules and knowledge, while AI can learn and adapt to make predictions or decisions based on data.

\textbf{Example:} An AI-based customer service chatbot that answers customer queries, provides recommendations, and resolves issues based on programmed knowledge and learned patterns.
\newpage
\section{Describe the Role of System Analyst as Consultant, Support Expert, and Agent of Change. What Are the Key Qualities a System Analyst Should Possess in These Roles?}

\subsection{1. Consultant}
\textbf{Role:} As a consultant, a System Analyst provides expert advice to organizations about how to improve their information systems. They assess current systems, identify needs, and recommend solutions that align with business goals. They play a crucial role in minimizing the gap between technical teams and business stakeholders, ensuring that technological solutions meet the organization's requirements.

\textbf{Key Qualities:}
\begin{itemize}
    \item \textbf{Analytical Skills:} Ability to assess complex systems and identify areas for improvement.
    \item \textbf{Communication Skills:} Proficiency in explaining technical concepts to non-technical stakeholders in simple terms.
    \item \textbf{Problem-Solving Abilities:} Capacity to propose unique and effective solutions to business problems through technical knowledge.
\end{itemize}

\subsection{2. Support Expert}
\textbf{Role:} As a support expert, a System Analyst provides ongoing assistance to users and maintains systems to ensure they function efficiently. This involves troubleshooting, providing training, and helping users adapt to new technologies or changes in the system.

\textbf{Key Qualities:}
\begin{itemize}
    \item \textbf{Technical Expertise:} In-depth knowledge of the system to resolve issues effectively.
    \item \textbf{Patience and Supportiveness:} Ability to help users understand and navigate the system, ensuring they feel supported.
    \item \textbf{Attention to Detail:} Thorough understanding of system intricacies to anticipate and prevent potential issues.
\end{itemize}

\subsection{3. Agent of Change}
\textbf{Role:} As an agent of change, a System Analyst drives organizational change by implementing new systems or improving existing ones. They ensure that new systems align with the organization's goals and that employees are prepared to adapt to changes. This role involves project management, change management, and often requires influencing stakeholders to embrace innovation.

\textbf{Key Qualities:}
\begin{itemize}
    \item \textbf{Leadership Skills:} Ability to guide teams and stakeholders through change.
    \item \textbf{Persuasiveness:} Skills in convincing stakeholders of the benefits of change and innovation.
    \item \textbf{Strategic Thinking:} Capacity to foresee the impact of changes and plan accordingly to align with long-term business objectives.
\end{itemize}

In all these roles, a System Analyst must possess strong analytical, technical, and communication skills to effectively bridge the gap between technical solutions and business needs. These roles require adaptability, as the analyst must be able to work across various domains, from technical troubleshooting to strategic planning.

\newpage


\section{Explain the Following Software Development Methodologies}

\subsection{a. Systems Development Life Cycle (SDLC) – Systematic Approach}
\textbf{Explanation:} The Systems Development Life Cycle (SDLC) is a structured, step-by-step approach for developing software. It follows a series of stages from understanding what the system needs to do, through designing, building, testing, and finally deploying the software. It is often described as a "waterfall" model because each phase flows into the next in a linear fashion.

\textbf{Stages:}
\begin{enumerate}
    \item \textbf{Planning:} Identify the system's needs and define the project scope.
    \item \textbf{Analysis:} Gather detailed requirements and understand how the system should function.
    \item \textbf{Design:} Create the architecture and design of the system.
    \item \textbf{Implementation:} Build and code the software.
    \item \textbf{Testing:} Check the software for bugs and ensure it works as intended.
    \item \textbf{Deployment:} Install the software in the real-world environment.
    \item \textbf{Maintenance:} Update and fix the system as needed over time.
\end{enumerate}

\textbf{Key Point:} SDLC is a systematic and organized way of developing software, ensuring that all steps are followed to create a reliable and effective system.

\subsection{b. The Agile Approach}
\textbf{Explanation:} The Agile approach is a flexible and iterative method of software development. Unlike the linear approach of SDLC, Agile focuses on working in small, manageable chunks called "sprints" or "iterations." Each sprint usually lasts a few weeks and results in a small part of the software being developed and tested. Agile emphasizes collaboration, adaptability, and continuous feedback.

\textbf{Key Principles:}
\begin{itemize}
    \item \textbf{Flexibility:} The project can adapt to changes quickly, whether in requirements or project direction.
    \item \textbf{Customer Collaboration:} Regular feedback from the customers is crucial to ensure the software meets their needs.
    \item \textbf{Iterative Development:} The software is developed in smaller parts, with each part being tested and improved in cycles.
\end{itemize}

\textbf{Key Point:} Agile is a more adaptive and collaborative approach to software development, allowing teams to respond quickly to changes and deliver working software frequently.

\subsection{c. Object-Oriented Systems Analysis and Design (OOSAD)}
\textbf{Explanation:} Object-Oriented Systems Analysis and Design (OOSAD) focuses on designing software using "objects". Objects are self-contained units that represent real-world entities or concepts, each with its own properties (attributes) and behaviors (methods). OOSAD uses these objects to model the system, making it easier to design, understand, and modify.

\textbf{Key Concepts:}
\begin{itemize}
    \item \textbf{Objects:} Represent real-world entities like a "Customer" or "Product" in a system.
    \item \textbf{Classes:} Blueprints for creating objects. For example, a "Car" class might define that all cars have wheels and engines.
    \item \textbf{Inheritance:} Allowing new objects to inherit properties and behaviors from existing ones, reducing redundancy.
    \item \textbf{Encapsulation:} Hiding the internal workings of an object, exposing only what is necessary.
\end{itemize}

\newpage
\section{Discuss How You Would Select Each of Those Development Methodologies in Different Scenarios}

\subsection{a. Systems Development Life Cycle (SDLC) – Systematic Approach}
\textbf{When to Select:}
\begin{itemize}
    \item \textbf{Well-Defined Requirements:} Use SDLC when the project has clear and fixed requirements from the start. This approach is best for projects where everything needs to be planned out in advance.
    \item \textbf{Large and Complex Projects:} SDLC works well for large projects that need a structured and detailed process to manage complexity.
    \item \textbf{Regulatory Compliance:} If the project involves strict regulations or standards, SDLC ensures that all necessary steps are documented and followed.
\end{itemize}

\textbf{Example Scenario:} Developing a government system where requirements are fixed, and there is a need for detailed documentation and a step-by-step process.

\subsection{b. The Agile Approach}
\textbf{When to Select:}
\begin{itemize}
    \item \textbf{Changing Requirements:} Choose Agile when the project is likely to have changing or evolving requirements. Agile’s flexibility allows for adjustments as the project progresses.
    \item \textbf{Fast-Paced Environment:} Agile is ideal for projects that need quick delivery of small, functional parts of the software. This approach is suitable when there is a need for regular updates and feedback.
    \item \textbf{Customer Involvement:} Agile is best when continuous customer interaction and feedback are necessary to shape the product.
\end{itemize}

\textbf{Example Scenario:} Developing a mobile app where user feedback is crucial, and the product needs frequent updates based on that feedback.

\subsection{c. Object-Oriented Systems Analysis and Design (OOSAD)}
\textbf{When to Select:}
\begin{itemize}
    \item \textbf{Complex Data Relationships:} Use OOSAD when the system involves complex relationships between different entities (e.g., a customer database that links customers, orders, and products).
    \item \textbf{Reusability:} OOSAD is ideal when the project needs components that can be reused in other parts of the system or future projects. The object-oriented approach makes it easier to create modular, reusable code.
    \item \textbf{Long-Term Maintenance:} If the project requires easy maintenance and future updates, OOSAD’s structure helps by keeping the system modular and organized.
\end{itemize}

\textbf{Example Scenario:} Designing a customer relationship management (CRM) system where customers, products, and orders are managed as separate objects, making the system easy to maintain and expand.






\end{document}
